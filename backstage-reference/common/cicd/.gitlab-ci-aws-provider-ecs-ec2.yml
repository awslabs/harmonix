iac-deployment-env-provider:
  stage: build
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:log_os[collapsed=true]\r\e[0KOS Info"
    - cat /etc/os-release
    - echo -e "\e[0Ksection_end:`date +%s`:log_os\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:get_tools[collapsed=true]\r\e[0KGet Tools"
    - apt-get update
    - apt install nodejs npm git python3-pip yq jq -y
    - export PIP_BREAK_SYSTEM_PACKAGES=1
    - pip3 install awscli --upgrade
    - yarn global add aws-cli typescript@latest aws-cdk@2.1007.0
    - yarn --version
    - aws --version
    - echo -e "\e[0Ksection_end:`date +%s`:get_tools\r\e[0K"
    # Export environment variables
    - set -a && source stack-parameters.properties && set +a
    - echo -e "\e[0Ksection_start:`date +%s`:aws_identity[collapsed=true]\r\e[0KAssume AWS IAM Role"
    - aws sts get-caller-identity
    # Store the access token before assuming the environment provisioning role
    - ACCESS_TOKEN=`aws secretsmanager get-secret-value --secret-id opa-admin-gitlab-secrets --region ${OPA_PLATFORM_REGION} | jq --raw-output '.SecretString' | jq -r .apiToken`
    - ROLE_OUTPUT=$(aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name "pipelineJob-$AWS_ACCOUNT_ID" --duration-second=3600 --output json)
    - export AWS_ACCESS_KEY_ID=$(echo ${ROLE_OUTPUT} | jq -r '.Credentials.AccessKeyId')
    - export AWS_SECRET_ACCESS_KEY=$(echo ${ROLE_OUTPUT} | jq -r '.Credentials.SecretAccessKey')
    - export AWS_SESSION_TOKEN=$(echo ${ROLE_OUTPUT} | jq -r '.Credentials.SessionToken')
    - aws sts get-caller-identity
    - echo -e "\e[0Ksection_end:`date +%s`:aws_identity\r\e[0K"
  script:
    # Export environment variables
    - set -a && source stack-parameters.properties && set +a

    - echo -e "\e[0Ksection_start:`date +%s`:cdk_bootstrap[collapsed=true]\r\e[0KCDK Bootstrap"
    - cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_DEFAULT_REGION
    - echo -e "\e[0Ksection_end:`date +%s`:cdk_bootstrap\r\e[0K"

    - cd .iac/opa-ecs-ec2-environment

    - echo -e "\e[0Ksection_start:`date +%s`:yarn_install[collapsed=true]\r\e[0KYarn Install"
    - yarn install
    - echo -e "\e[0Ksection_end:`date +%s`:yarn_install\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:cdk_deploy[collapsed=true]\r\e[0KCDK Deploy"
    - cdk deploy --outputs-file cdk-output.json --require-approval never
    - echo -e "\e[0Ksection_end:`date +%s`:cdk_deploy\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:extract_cdk_output[collapsed=true]\r\e[0KExport CDK Output"
    # once CDK finished - extract output params
    - jq '.[] ' cdk-output.json | jq -r 'to_entries[]|"\(.key)=\"\(.value)\""' > cdk-output.properties
    # export the new variables
    - cat cdk-output.properties
    - set -a && source cdk-output.properties && set +a
    - echo -e "\e[0Ksection_end:`date +%s`:extract_cdk_output\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:backstage_entity[collapsed=true]\r\e[0KUpdate Backstage Entity"
    # alter entity details
    - cd $CI_PROJECT_DIR/.backstage
    - yq -Yi ".metadata.vpc =\"${VPC}\"" catalog-info.yaml
    - yq -Yi ".metadata[\"clusterName\"] = \"${ClusterName}\"" catalog-info.yaml
    - yq -Yi ".metadata[\"auditTable\"] = \"${AuditTable}\"" catalog-info.yaml
    - yq -Yi ".metadata[\"operationRole\"] = \"${OperationsRoleARN}\"" catalog-info.yaml
    - yq -Yi ".metadata[\"provisioningRole\"] = \"${ProvisioningRoleARN}\"" catalog-info.yaml
    - yq -Yi ".metadata[\"stackName\"] = \"${StackName}\"" catalog-info.yaml
    - cat catalog-info.yaml
    - echo -e "\e[0Ksection_end:`date +%s`:backstage_entity\r\e[0K"

    - echo -e "\e[0Ksection_start:`date +%s`:git[collapsed=true]\r\e[0KUpdate Git Repo"
    - git config --global user.email "fsi-pace-pe@amazon.com"
    - git config --global user.name "OPA CICD User"
    - git add catalog-info.yaml
    - git status
    - UPDATE_COUNT=$(git diff --cached --numstat | wc -l | sed 's/ *$//g')
    - echo "The number of files that will be committed is $UPDATE_COUNT"
    - if [[ "$UPDATE_COUNT" -gt "0" ]]; then git commit -m "updating entity details" --quiet; fi
    - if [[ "$UPDATE_COUNT" -gt "0" ]]; then git push -o ci.skip https://oauth2:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME HEAD:main; fi
    - echo -e "\e[0Ksection_end:`date +%s`:git\r\e[0K"
