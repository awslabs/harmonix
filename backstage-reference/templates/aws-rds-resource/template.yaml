apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: aws-rds
  title: AWS RDS Database
  description: >-
    Create an Amazon RDS postgreSQL database.
  tags:
    - aws-resource
    - database
    - rds
    - aws
spec:
  owner: group:admins
  type: resource
  parameters:
    - title: Provide component information
      required:
        - component_id
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: what this database is for
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group]
    - title: Provide deployment information for the resource
      required:
        - environment
      properties:
        environment:
          title: AWS Environment
          type: string
          description: The AWS Environment where the database is created
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - AWSEnvironment
            defaultKind: AWSEnvironment
    - title: Provide database configuration
      required:
        - dbName
        - dbObjectName
        - db_type
        - instance_size
      properties:
        dbName:
          title: Database name
          type: string
          description: The name of a default database to create in the RDS instance
          default: usersdb
        dbObjectName:
          title: Object name
          type: string
          description: >-
            The name of the object that you will track in the default database.  
            This is usually a singular noun (e.g. 'author' or 'user').
          default: user
        db_type:
          title: Database engine
          type: string
          description: The type of database to create
          default: aurora_postgresql
          enum:
            - aurora_mysql
            - aurora_postgresql
            - mysql
            - postgresql
            - mariadb
          enumNames:
            - "Aurora MySQL"
            - "Aurora PostgreSQL"
            - "MySQL"
            - "PostgreSQL"
            - "MariaDB"
        instance_size:
          title: Database size
          type: string
          description: The size of the database required
          default: small
          enum:
            - small
            - medium
            - large
          enumNames:
            - "Small (20 GB) - development/prototypes"
            - "Medium (100 GB) - dev/test scenarios"
            - "Large (500 GB) - production scenarios"
    - title: Choose a git repository location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - {{ gitlab_hostname }}
            allowedOwners:
              - aws-resources

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    - id: harmonixGetPlatformInfo
      name: Get Harmonix platform information
      action: harmonix:get-platform-metadata
      
    - id: opaGetAwsEnvProviders
      name: Get AWS Environment Providers
      action: harmonix:get-env-providers
      input:
        environmentRef: ${{ parameters.environment }}

    - id: debugEnvironment
      name: Print the environment entity info
      action: debug:log
      input:
        message: ${{ steps['opaGetAwsEnvProviders'].output | dump }}

    - id: createProviderPropsFiles
      each: ${{ steps['opaGetAwsEnvProviders'].output.envProviders }}
      name: Store environment provider parameters
      action: harmonix:fs:write
      input:
        path: .awsdeployment/providers/${{ steps['opaGetAwsEnvProviders'].output.envName }}-${{ each.value.envProviderName}}.properties
        content: |
          APP_SHORT_NAME=${{ parameters.component_id | lower }}
          TARGET_VPCID=${{ each.value.vpcId }}
          TARGET_ENV_NAME=${{ steps['opaGetAwsEnvProviders'].output.envName }}
          TARGET_ENV_PROVIDER_NAME=${{ each.value.envProviderName }}
          TARGET_DB_NAME=${{ parameters.dbName }}
          TARGET_DB_TYPE=${{ parameters.db_type }}
          TARGET_DB_SIZE=${{ parameters.instance_size }}
          ACCOUNT=${{ each.value.accountId }}
          REGION=${{ each.value.region }}
          PREFIX=${{ each.value.envProviderPrefix }}
          ENV_ROLE_ARN=${{ each.value.assumedRoleArn }}
          OPA_CI_ENVIRONMENT=${{ steps['opaGetAwsEnvProviders'].output.envName }}-${{ each.value.envProviderName }}
          OPA_CI_ENVIRONMENT_MANUAL_APPROVAL={% if steps['opaGetAwsEnvProviders'].output.envDeployManualApproval %}true{% else %}false{% endif %}
    - id: fetchIac
      name: Fetch RDS Infrastructure as Code
      action: fetch:template
      input: 
        url: https://{{ gitlab_hostname }}/opa-admin/backstage-reference/-/tree/main/common/aws_rds
        targetPath: ./.iac
        values:
          component_id: ${{ parameters.component_id | lower}}
          appEnvPlaintext: ""
    - id: fetchBase
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          component_id: ${{ parameters.component_id | lower | replace(" ", "") }}
          title: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          platformRegion: ${{ steps['harmonixGetPlatformInfo'].output.platformRegion }}
          awsEnvironment: ${{ steps['opaGetAwsEnvProviders'].output.envRef }}
          awsEnvironmentName: ${{ steps['opaGetAwsEnvProviders'].output.envName }}
          awsEnvironmentProviderName: ${{ steps['opaGetAwsEnvProviders'].output.envProviders[0].envProviderName }}
          awsEnvironmentPrefix: ${{ steps['opaGetAwsEnvProviders'].output.envProviders[0].envProviderPrefix }}
          awsRegion: ${{ steps['opaGetAwsEnvProviders'].output.envProviders[0].region }}
          awsAccount: ${{ steps['opaGetAwsEnvProviders'].output.envProviders[0].accountId }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          assumedRoleArn: ${{ steps['opaGetAwsEnvProviders'].output.envProviders[0].assumedRoleArn }}
          dbName: ${{ parameters.dbName }}
          dbObjectName: ${{ parameters.dbObjectName }}
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: internal
        defaultBranch: main
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/.backstage/catalog-info.yaml"
  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}

